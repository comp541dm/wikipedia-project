Bash (disambiguation)'''Bash''' is a Unix shell and command language written by Brian Fox for the GNU Project as a free software replacement for the Bourne shell.Released in 1989,it has been distributed widely as the shell for the GNU operating system and as a default shell on Linux and .  It has been ported to Microsoft Windows and distributed with Cygwin and MinGW, to DOS by the DJGPP project, to Novell NetWare and to Android via various terminal emulation applications. In the late 1990s, Bash was a minor player among multiple commonly used shells; at present Bash has overwhelming favor.Bash is a command processor that typically runs in a text window, where the user types commands that cause actions. Bash can also read commands from a file, called a  script.  Like all Unix shells, it supports  filename globbing (wildcard matching), piping, here documents, command substitution, variables and control structures for condition-testing and iteration. The keywords, syntax and other basic features of the language were all copied from sh.  Other features, e.g., history, were copied from csh and ksh.  Bash is a POSIX shell, but with a number of extensions.The name itself is an acronym, a pun, and a description.  As an acronym, it stands for ''Bourne-again shell'', referring to its objective as a free replacement for the Bourne shell.[C Programming] by Al Stevens, Dr. Dobb's Journal, July 1, 2001As a pun, it expressed that objective in a phrase that sounds similar to ''born again'', a term for spiritual rebirth.The name is also descriptive of what it did, ''bashing together'' the features of sh, csh, and ksh.A security hole in Bash dating from version 1.03 (August 1989), dubbed Shellshock, was discovered in early September 2014.HistoryBrian Fox began coding Bash on January 10, 1988after Richard Stallman became dissatisfied with the lack of progress being made by a prior developer.GNUBSDStallman and the Free Software Foundation (FSF) considered a free shell that could run existing shell scripts so strategic to a completely free system built from BSD and GNU code that this was one of the few projects they funded themselves, with Fox undertaking the work as an employee of FSF.GNUBSDFox released Bash as a beta, version .99, on June 8, 1989BashBetaand remained the primary maintainer until sometime between mid-1992and mid-1994, when he was laid off from FSFand his responsibility was transitioned to another early contributor, Chet Ramey.In September 2014, Stéphane Chazelas, a Unix/Linux, network and telecom specialist working in the UK, discovered a security bug in the program. The bug, first disclosed on September 24, was named Shellshock and assigned the numbers , CVE-2014-6277 and . The bug was regarded as severe, since CGI scripts using Bash could be vulnerable, enabling arbitrary code execution.  The bug is related to how Bash passes function definitions to subshells through environment variables.FeaturesThe Bash command syntax is a superset of the Bourne shell command syntax. Bash can execute the vast majority of Bourne shell scripts without modification, with the exception of Bourne shell scripts stumbling into fringe syntax behavior interpreted differently in Bash or attempting to run a system command matching a newer Bash builtin, etc.  Bash command syntax includes ideas drawn from the Korn shell (ksh) and the C shell (csh) such as command line editing, command history, the directory stack, the $RANDOM and $PPID variables, and POSIX command substitution syntax $(…).When a user presses the tab key within an interactive command-shell, Bash automatically uses command line completion to match partly typed program names, filenames and variable names.  The Bash command-line completion system is very flexible and customizable, and is often packaged with functions that complete arguments and filenames for specific programs and tasks.Bash's syntax has many extensions lacking in the Bourne shell. Bash can perform integer calculations ("arithmetic evaluation") without spawning external processes. It uses the ((…)) command and the $((…)) variable syntax for this purpose. Its syntax simplifies redirection (computing)|I/O redirection. For example, it can redirect standard output (stdout) and standard error (stderr) at the same time using the ;; operator. This is simpler to type than the Bourne shell equivalent 'command ; file 2;;1'.  Bash supports process substitution using the ;(command) and ;(command)syntax, which substitutes the output of (or input to) a command where a filename is normally used.  (This is implemented through ''/proc/fd/'' unnamed pipes on systems which support that, or via temporary named pipes where necessary).When using the 'function' keyword, Bash function declarations are not compatible with Bourne/Korn/POSIX scripts (the Korn shell has the same problem when using 'function'), but Bash accepts the same function declaration syntax as the Bourne and Korn shells, and is POSIX-conformant. Because of these and other differences, Bash shell scripts are rarely runnable under the Bourne or Korn shell interpreters unless deliberately written with that compatibility in mind, which is becoming less common as Linux becomes more widespread.  But in POSIX mode,Bash conformance with POSIX is nearly perfect.Bash supports here documents. Since version 2.05b Bash can redirect standard input (stdin) from a "here string" using the ;;; operator.Bash 3.0 supports in-process regular expression matching using a syntax reminiscent of Perl.The syntax matches that shown on the  man page.Bash 4.0 introduced support for associative arrays.GNUBASHREF"The shell provides associative array variables, with the appropriate support to create, delete, assign values to, and expand them." Associative arrays allow a fake support for multi-dimensional (indexed) arrays, in a similar way to AWK:$ declare -A a         # declare an associative array 'a' faking a bi-dimensional indexed array$ i=1; j=2             # initialize some indices$ a[$i,$j]=5           # associate value "5" to key "$i,$j" (i.e. "1,2")$ echo ${a[$i,$j]}     # print the stored value at key "$i,$j"5;/source;Brace expansionBrace expansion, also called alternation, is a feature copied from the C shell. It generates a set of alternative combinations. Generated results need not exist as files. The results of each expanded string are not sorted and left to right order is preserved:$ echo a{p,c,d,b}eape ace ade abe$ echo {a,b,c}{d,e,f}ad ae af bd be bf cd ce cf;/source;Users should not use brace expansions in portable shell scripts, because the Bourne shell does not produce the same output.#!/bin/sh# A traditional shell does not produce the same outputecho a{p,c,d,b}e # a{p,c,d,b}e;/source;When brace expansion is combined with wildcards, the braces are expanded first, and then the resulting wildcards are substituted normally.  Hence, a listing of JPEG and PNG images in the current directory could be obtained using:ls *.{jpg,jpeg,png}    # expands to *.jpg *.jpeg *.png - after which,# the wildcards are processedecho *.{png,jp{e,}g}   # echo just show the expansions -# and braces in braces are possible.;/source;In addition to alternation, brace expansion can be used for sequential ranges between two integers or characters separated by double dots. Newer versions of Bash allow a third integer to specify the increment.$ echo {1..10}1 2 3 4 5 6 7 8 9 10$ echo file{1..4}.txtfile1.txt file2.txt file3.txt file4.txt$ echo {a..e}a b c d e$ echo {1..10..3}1 4 7 10$ echo {a..j..3}a d g j;/source;When brace expansion is combined with variable expansion the variable expansion is performed '''after''' the brace expansion, which in some cases may necessitate the use of the built-in eval function thus:$ start=1; end=10$ echo {$start..$end}  # fails to expand due to the evaluation order{1..10}$ eval echo {$start..$end} # variable expansion occurs then resulting string is evaluated1 2 3 4 5 6 7 8 9 10;/source;Startup scriptsWhen Bash starts, it executes the commands in a variety of dot files.  Though similar to Bash shell script commands, which have execute permission enabled and an interpreter directive like #!/bin/bash, the initialization files used by Bash require neither.Execution order of startup files;;=When started as an interactive login shell=Bash reads and executes /etc/profile (if it exists). (Often this file calls /etc/bash.bashrc.)After reading that file, it looks for ~/.bash_profile, ~/.bash_login, and ~/.profile ''in that order'', and reads and executes the first one that exists and is readable.=When a login shell exits=Bash reads and executes ~/.bash_logout (if it exists).=When started as an interactive shell (but not a login shell)=Bash reads and executes ~/.bashrc (if it exists). This may be inhibited by using the --norc option. The --rcfile file option forces Bash to read and execute commands from file instead of ~/.bashrc.;/div;Comparison with the Bourne shell and csh startup sequencesElements of Bash were derived from the Bourne shell and csh, and allow limited startup file sharing with the Bourne shell and provide some startup features familiar to users of the csh.;;=Setting inheritable environment variables=The Bourne shell uses the ~/.profile at login to set environment variables that subprocesses then inherit. Bash can use the ~/.profile in a compatible way, by executing it explicitly from the Bash-specific ~/.bash_profile or ~/.bash_login with the line below.  Bash-specific syntax can be kept out of the ~/.profile to keep the latter compatible with the Bourne shell.. ~/.profile;/source;=Aliases and Functions=These two facilities, aliases from ''csh'' and the more general functions that largely supersede them from Bourne shell, were not typically inheritable from the login shell, and had to be redefined in each subshell spawned from the login shell.  Although there is an ENV environment variable that could be applied to the problem, both ''csh'' and Bash support per-subshell startup files that address it directly.  In Bash, the ~/.bashrc is called for interactive subshells.  If user-defined functions from the ~/.bashrc are desired in the login shell as well, the ~/.bash_login can include the line below after any setting up of environment variables:. ~/.bashrc;/source;=Commands performed only at login and logout=The ''csh'' supports a ~/.login file for purposes of tasks performed only during initial login, such as displaying system load, disk status, whether email has come in, logging the login time, etc.  The Bourne shell can emulate this in the ~/.profile, but doesn't predefine a file name.  To achieve similar semantics to the csh model, the ~/.bash_profile can contain the line below, after the environment setup and function setup:. ~/.bash_login;/source;Likewise, the ''csh'' has a ~/.logout file run only when the login shell exits.  The Bash equivalent is ~/.bash_logout, and requires no special setup.  In the Bourne shell, the trap built-in can be used to achieve a similar effect.;/div;=Legacy-compatible Bash startup example=The skeleton ~/.bash_profile below is compatible with the Bourne shell and gives semantics similar to csh for the ~/.bashrc and ~/.bash_login.  The [ -r ''filename'' ] are tests to see if the ''filename'' exists and is readable, simply skipping the part after the ;; if it's not.[ -r ~/.profile ] ;; . ~/.profile             # set up environment, once, Bourne-sh syntax onlyif [ -n "$PS1" ] ; then                       # are we interactive?[ -r ~/.bashrc     ] ;; . ~/.bashrc        # tty/prompt/function setup for interactive shells[ -r ~/.bash_login ] ;; . ~/.bash_login    # any at-login tasks for login shell onlyfi;/source;Operating system issues in Bash startupSome versions of Unix and Linux contain Bash system startup scripts, generally under the /etc directories. Bash calls these as part of its standard initialization, but other startup files can read them in a different order than the documented Bash startup sequence.  The default content of the root user's files may also have issues, as well as the skeleton files the system provides to new user accounts upon setup.  The startup scripts that launch the X window system may also do surprising things with the user's Bash startup scripts in an attempt to set up user-environment variables before launching the window manager. These issues can often be addressed using a ~/.xsession or ~/.xprofile file to read the ~/.profile — which provides the environment variables which Bash shell windows spawned from the window manager need, such as xterm or Gnome Terminal.PortabilityInvoking Bash with the --posix option or stating set -o posix in a script causes Bash to conform very closely to the POSIX 1003.2 standard.tldpBash shell scripts intended for portability should at least take into account the Bourne shell it intends to replace.Bash has certain features that the traditional Bourne shell lacks. They include:* Certain extended invocation options* Command substitution using $( ) notation (this feature is part of the POSIX 1003.2 standard though)* Brace expansion* Certain array operations, and associative arrays* The double brackets extended test construct* The double-parentheses arithmetic-evaluation construct* Certain string-manipulation operations* Process substitution* A Regular Expression matching operator* Bash-specific builtins* CoprocessesKeyboard shortcutsGNU ReadlineBash uses readline to provide keyboard shortcuts for command line editing using the default (Emacs) key bindings. Vi-bindings can be enabled by running set -o vi.Process managementThe Bash shell has two modes of execution for commands: batch (Unix), and concurrent mode.To execute commands in batch (i.e., in sequence) they must be separated by the character ";":command1; command2;/source;in this example, when command1 is finished, command2 is executed.To have a concurrent execution of command1 and command2, they must be executed in the Bash shell in the following way:command1 ; command2;/source;In this case command1 is executed in background (symbol ;), returning immediately the control to the shell that executes command2.Summarizing:* Normally a command is executed in foreground (fg). The control of the shell returns to the user after the command finishes its execution and the special variable $! is set to the process ID of the newly spawned background job.* With the symbol ; after the command, it can be executed in background (bg). The shell is ready to execute other commands, concurrently to the first command.* A program in the running state and in foreground (fg) can be suspended pressing z* A suspended program can be resumed in foreground using the command fg or background using the command bg.* A background process may become blocked on attempts to write to the terminal device (as distinct from simple writes to its standard output).* The shell can synchronize with the completion of specific background jobs using the wait command by supplying a process ID or job number, or await completion of all background jobs by calling wait with no arguments.Conditional ExecutionBash supplies "conditional execution" command separators which allow for the execution of a command to be contingent on the exit code set by a precedent command.  For example:cd "$SOMEWHERE" ;; ./do_something || echo "An error occurred" ;;2;/source;Where ''./do_something'' is only executed if the ''cd'' (change directory) command was "successful" (returned an exit status of zero) and the ''echo'' command would only be executed if either the ''cd' or the ''./do_something'' command return an "error" (non-zero exit status).For all commands the exit status is stored in the special variable $?.  Bash also support  and  forms of conditional command evaluation.Bug reportingShellshock (software bug)An external command called ''bashbug'' reports Bash shell bugs.[bashbug(1)], die.net["Linux / Unix Command: bashbug"], apple.comWhen the command is invoked, it brings up the user's default editor with a form to fill in. The form is mailed to the Bash maintainers (or optionally to other email addresses).See alsoFree software* Comparison of command shellsReferences30emExternal linksBashBash Shell Scripting***