File:US Navy 090407-N-4669J-042 Sailors assigned to the air department of the aircraft carrier USS George H.W. Bush (CVN 77) test the ship's catapult systems during acceptance trials.jpg|thumb|right|300px|Acceptance testing of an aircraft catapultFile:James Webb Primary Mirror.jpg|thumb|right|300px|Six of the primary mirrors of the James Webb Space Telescope being prepared for acceptance testingIn engineering and its various subdisciplines, '''acceptance testing''' is a test conducted to determine if the requirements of a specification or contract are met. It may involve chemical tests, physical tests, or performance tests.In systems engineering it may involve black-box testing performed on a system (for example: a piece of software, lots of manufactured mechanical parts, or batches of chemical products) prior to its delivery.In software testing the ISTQB defines ''acceptance'' as: formal testing with respect to user needs, requirements, and business processes conducted to determine whether a system satisfies the acceptance criteria and to enable the user, customers or other authorized entity to determine whether or not to accept the system. Acceptance testing is also known as user acceptance testing (UAT), end-user testing, operational acceptance testing (OAT) or field (acceptance) testing.A smoke test may be used as an acceptance test prior to introducing a build of software to the main testing process.OverviewTesting is a set of activities conducted to facilitate discovery and/or evaluation of properties of one or more items under test.  Each individual test, known as a test case, exercises a set of predefined test activities, developed to drive the execution of the test item to meet test objectives; including correct implementation, error identification, quality verification and other valued detail."ISO 29119 Part-1"The test environment is usually designed to be identical, or as close as possible, to the anticipated production environment. It includes all facilities, hardware, software, firmware, procedures and/or documentation intended for or used to perform the testing of software."ISO 29119 Part-1"UAT and OAT test cases are ideally derived in collaboration with business customers, business analysts, testers, and developers. It's essential that these tests include both business logic tests as well as operational environment conditions. The business customers (product owners) are the primary stakeholders of these tests. As the test conditions successfully achieve their acceptance criteria, the stakeholders are reassured the development is progressing in the right direction.* User acceptance test (UAT) criteria (in agile software development) are usually created by business customers and expressed in a business domain language. These are high-level tests to verify the completeness of a user story or stories 'played' during any sprint/iteration.* Operational acceptance test (OAT) criteria (regardless if using agile, iterative or sequential development) are defined in terms of functional and non-functional requirements; covering key quality attributes of functional stability, portability and reliability.ProcessThe acceptance test suite may need to be performed multiple times, as all of the test cases may not be executed within a single test iteration.The acceptance test suite is run using predefined acceptance test procedures to direct the testers which data to use, the step-by-step processes to follow and the expected result following execution. The actual results are retained for comparison with the expected results."ISO 29119 Part-2"If the actual results match the expected results for each test case, the test case is said to pass. If the quantity of non-passing test cases does not breach the project's predetermined threshold, the test suite is said to pass. If it does, the system may either be rejected or accepted on conditions previously agreed between the sponsor and the manufacturer.The anticipated result of a successful test execution:* test cases are executed, using predetermined data* actual results are recorded* actual and expected results are compared, and* test results are determined.The objective is to provide confidence that the developed product meets both the functional and non-functional requirements. The purpose of conducting acceptance testing is that once completed, and provided the acceptance criteria are met, it is expected the sponsors will sign-off on the product development/enhancement as satisfying the defined requirements (previously agreed between business and product provider/developer).User acceptance testingUser acceptance testing (UAT) consists of a process of verifying that a solution works for the user.  It is not system testing (ensuring software does not crash and meets documented requirements), but rather ensures that the solution will work for the user (i.e., tests that the user accepts the solution); software vendors often refer to this as "Beta testing".This testing should be undertaken by a subject-matter expert (SME), preferably the owner or client of the solution under test, and provide a summary of the findings for confirmation to proceed after trial or review. In software development, UAT as one of the final stages of a project often occurs before a client or customer accepts the new system. Users of the system perform tests in line with what would occur in real-life scenarios.It is important that the materials given to the tester be similar to the materials that the end user will have. Provide testers with real-life scenarios such as the three most common tasks or the three most difficult tasks you expect an average user will undertake. Instructions on how to complete the tasks must not be provided.The UAT acts as a final verification of the required business functionality and proper functioning of the system, emulating real-world usage conditions on behalf of the paying client or a specific large customer. If the software works as required and without issues during normal use, one can reasonably extrapolate the same level of stability in production.User tests, usually performed by clients or by end-users, do not normally focus on identifying simple problems such as spelling errors or cosmetic problems, nor on showstopper defects, such as software crashes; testers and developers previously identify and fix these issues during earlier unit testing, integration testing, and system testing phases.UAT should be executed against test scenarios. Test scenarios usually differ from System or Functional test cases in the sense that they represent a "player" or "user" journey. The broad nature of the test scenario ensures that the focus is on the journey and not on technical or system-specific key presses, staying away from "click-by-click" test steps to allow for a variance in users' steps through systems. Test scenarios can be broken down into logical "days", which are usually where the actor (player/customer/operator) or system (backoffice, front end) changes.In the industrial sector, a common UAT is a factory acceptance test (FAT). This test takes place before installation of the concerned equipment. Most of the time testers not only check if the equipment meets the pre-set specification, but also if the equipment is fully functional. A FAT usually includes a check of completeness, a verification against contractual requirements, a proof of functionality (either by simulation or a conventional function test) and a final inspection.The results of these tests give confidence to the client(s) as to how the system will perform in production. There may also be legal or contractual requirements for acceptance of the system.Operational acceptance testingOperational Acceptance Testing (OAT) is used to conduct operational readiness (pre-release) of a product, service or system as part of a quality management system. OAT is a common type of non-functional software testing, used mainly in software development and software maintenance projects. This type of testing focuses on the operational readiness of the system to be supported, and/or to become part of the production environment.Acceptance testing in extreme programmingAcceptance testing is a term used in agile software development methodologies, particularly extreme programming, referring to the functional testing of a user story by the software development team during the implementation phase.The customer specifies scenarios to test when a user story has been correctly implemented. A story can have one or many acceptance tests, whatever it takes to ensure the functionality works. Acceptance tests are black-box system tests. Each acceptance test represents some expected result from the system. Customers are responsible for verifying the correctness of the acceptance tests and reviewing test scores to decide which failed tests are of highest priority. Acceptance tests are also used as regression tests prior to a production release. A user story is not considered complete until it has passed its acceptance tests. This means that new acceptance tests must be created for each iteration or the development team will report zero progress.Types of acceptance testingTypical types of acceptance testing include the following; User acceptance testing:: This may include factory acceptance testing, i.e. the testing done by factory users before the product or system is moved to its destination site, after which site acceptance testing may be performed by the users at the site.; Operational acceptance testing:Also known as operational readiness testing, this refers to the checking done to a system to ensure that processes and procedures are in place to allow the system to be used and maintained. This may include checks done to back-up facilities, procedures for disaster recovery, training for end users, maintenance procedures, and security procedures.; Contract and regulation acceptance testing: In contract acceptance testing, a system is tested against acceptance criteria as documented in a contract, before the system is accepted. In regulation acceptance testing, a system is tested to ensure it meets governmental, legal and safety standards.; Alpha and beta testing: Alpha testing takes place at developers' sites, and involves testing of the operational system by internal staff, before it is released to external customers. Beta testing takes place at customers' sites, and involves testing by a group of customers who use the system at their own locations and provide feedback, before the system is released to other customers. The latter is often called “field testing”.List of acceptance-testing frameworks* Concordion,  Specification by Example (SbE) framework** Concordion.NET, acceptance testing in .NET* Cucumber, a behavior-driven development (BDD) acceptance test framework** Capybara, Acceptance test framework for Ruby web applications** Behat, BDD acceptance framework for PHP** Lettuce, BDD acceptance framework for Python* Fabasoft app.test for automated acceptance tests* Framework for Integrated Test (Fit)** FitNesse, a fork of Fit* iMacros* ItsNat Java Ajax web framework with built-in, server based, functional web testing capabilities.* Mocha, a popular web acceptance test framework based on Javascript and Node.js* Ranorex* Robot Framework* Selenium* Specification by example (Specs2)* WatirSee alsoSoftware Testing* Acceptance sampling* Black-box testing* Conference room pilot* Development stage* Dynamic testing* Grey box testing* Software testing* System testing* Test-driven development* Unit testing* White box testingReferencesFurther reading*External links* Article [Using Customer Tests to Drive Development] from [Methods ; Tools]* Article [Acceptance TDD Explained] from [Methods ; Tools]* Article  from [Software Testing Help]