Blowfish (disambiguation);;'''Blowfish''' is a symmetric-key block cipher, designed in 1993 by Bruce Schneier and included in a large number of cipher suites and encryption products. Blowfish provides a good encryption rate in software and no effective cryptanalysis of it has been found to date. However, the Advanced Encryption Standard (AES) now receives more attention.Schneier designed Blowfish as a general-purpose algorithm, intended as an alternative to the aging DES and free of the problems and constraints associated with other algorithms. At the time Blowfish was released, many other designs were proprietary, encumbered by patents or were commercial or government secrets. Schneier has stated that, "Blowfish is unpatented, and will remain so in all countries. The algorithm is hereby placed in the public domain, and can be freely used by anyone."Notable features of the design include key-dependent S-boxes and a highly complex key schedule.The algorithmBlowfish has a 64-bit block size and a variable key length from 32 bits up to 448 bits. It is a 16-round Feistel cipher and uses large key-dependent S-boxes. In structure it resembles CAST-128, which uses fixed S-boxes.The Feistel structure of BlowfishThe diagram to the left shows Blowfish's encryption routine. Each line represents 32 bits. There are five subkey-arrays: one 18-entry P-array (denoted as K in the diagram, to avoid confusion with the Plaintext) and four 256-entry S-boxes (S0, S1, S2 and S3).Every round ''r'' consists of 4 actions: First, XOR the left half (L) of the data with the ''r'' th P-array entry, second, use the XORed data as input for Blowfish's F-function, third, XOR the F-function's output with the right half (R) of the data, and last, swap L and R.The F-function splits the 32-bit input into four eight-bit quarters, and uses the quarters as input to the S-boxes. The S-boxes accept 8-bit input and produce 32-bit output. The outputs are added modulo 232 and XORed to produce the final 32-bit output (see image in the upper right corner).After the 16th round, undo the last swap, and XOR L with K18 and R with K17 (output whitening).Decryption is exactly the same as encryption, except that P1, P2,..., P18 are used in the reverse order. This is not so obvious because xor is commutative and associative. A common misconception is to use inverse order of encryption as decryption algorithm (i.e. first XORing P17 and P18 to the ciphertext block, then using the P-entries in reverse order).Blowfish's key schedule starts by initializing the P-array and S-boxes with values derived from the hexadecimal digits of pi, which contain no obvious pattern (see nothing up my sleeve number). The secret key is then, byte by byte, cycling the key if necessary, XORed with all the P-entries in order. A 64-bit all-zero block is then encrypted with the algorithm as it stands. The resultant ciphertext replaces P1 and P2. The same ciphertext is then encrypted again with the new subkeys, and the new ciphertext replaces P3 and P4. This continues, replacing the entire P-array and all the S-box entries. In all, the Blowfish encryption algorithm will run 521 times to generate all the subkeys - about 4KB of data is processed.Because the P-array is 576 bits long, and the key bytes are XORed through all these 576 bits during the initialization, many implementations support key sizes up to 576 bits. While this is certainly possible, the 448 bits limit is here to ensure that every bit of every subkey depends on every bit of the key,"blowfish-paper"as the last four values of the P-array don't affect every bit of the ciphertext. This point should be taken in consideration for implementations with a different number of rounds, as even though it increases security against an exhaustive attack, it weakens the security guaranteed by the algorithm. And given the slow initialization of the cipher with each change of key, it is granted a natural protection against brute-force attacks, which doesn't really justify key sizes longer than 448 bits.Blowfish in pseudocodeuint32_t P[18];uint32_t S[4][256];uint32_t f (uint32_t x) {uint32_t h = S[0][x ;; 24] + S[1][x ;; 16 ; 0xff];return ( h ^ S[2][x ;; 8 ; 0xff] ) + S[3][x ; 0xff];}void encrypt (uint32_t ; L, uint32_t ; R) {for (int i=0 ; i;16 ; i += 2) {L ^= P[i];R ^= f(L);R ^= P[i+1];L ^= f(R);}L ^= P[16];R ^= P[17];swap (L, R);}void decrypt (uint32_t ; L, uint32_t ; R) {for (int i=16 ; i ; 0 ; i -= 2) {L ^= P[i+1];R ^= f(L);R ^= P[i];L ^= f(R);}L ^= P[1];R ^= P[0];swap (L, R);}{// ...// initializing the P-array and S-boxes with values derived from pi; omitted in the example// ...for (int i=0 ; i;18 ; ++i)P[i] ^= key[i % keylen];uint32_t L = 0, R = 0;for (int i=0 ; i;18 ; i+=2) {encrypt (L, R);P[i] = L; P[i+1] = R;}for (int i=0 ; i;4 ; ++i)for (int j=0 ; j;256; j+=2) {encrypt (L, R);S[i][j] = L; S[i][j+1] = R;}};/source;Blowfish in practiceBlowfish is a fast block cipher, except when changing keys. Each new key requires pre-processing equivalent to encrypting about 4 kilobytes of text, which is very slow compared to other block ciphers. This prevents its use in certain applications, but is not a problem in others.In one application Blowfish's slow key changing is actually a benefit: the password-hashing method used in OpenBSD uses an algorithm derived from Blowfish that makes use of the slow key schedule; the idea is that the extra computational effort required gives protection against dictionary attacks. ''See'' key stretching.Blowfish has a memory footprint of just over 4 kilobytes of RAM. This constraint is not a problem even for older desktop and laptop computers, though it does prevent use in the smallest embedded systems such as early smartcards.Blowfish was one of the first secure block ciphers not subject to any patents and therefore freely available for anyone to use. This benefit has contributed to its popularity in cryptographic software.bcrypt is a cross-platform file encryption utility implementing Blowfish developed in 2002.Weakness and successorsBlowfish is known to be susceptible to attacks on reflectively weak keys.This means Blowfish users must carefully select keys as there is a class of keys known to be weak, or switch to more modern alternatives like the Advanced Encryption Standard, Salsa20, or Blowfish's more modern successors Twofish and Threefish. Bruce Schneier, Blowfish's creator, is quoted in 2007 as saying "At this point, though, I'm amazed it's still being used. If people ask, I recommend Twofish instead."The FAQ for GnuPG (which features Blowfish as one of its algorithms) recommends that Blowfish should ''not'' be used to encrypt files that are larger than 4 Gb because of its small 64-bit block size.See also* AES* Twofish* Threefish* MacGuffinReferences30emExternal linksBlowfish (cipher)***block