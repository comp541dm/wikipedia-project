'''Algorithms for calculating variance''' play a major role in computational statistics. A key difficulty in the design of good algorithms for this problem is that formulas for the variance may involve sums of squares, which can lead to numerical instability as well as to arithmetic overflow when dealing with large values.Naïve algorithmA formula for calculating the variance of an entire population of size ''N'' is::\sigma^2 = \bar{(x^2)} - \bar x^2 = \displaystyle\frac {\sum_{i=1}^N x_i^2 - (\sum_{i=1}^N x_i)^2/N}{N}. \!Using Bessel's correction to calculate an unbiased estimate of the population variance from a finite sample of ''n'' observations, the formula is::s^2 = \displaystyle\frac {\sum_{i=1}^n x_i^2 - (\sum_{i=1}^n x_i)^2/n}{n-1}. \!Therefore, a naive algorithm to calculate the estimated variance is given by the following:blue* Let* For each datum x:*******;/div;This algorithm can easily be adapted to compute the variance of a finite population: simply divide by ''N'' instead of ''n''−1 on the last line.Because SumSq and  can be very similar numbers, cancellation can lead to the precision of the result to be much less than the inherent precision of the floating-point arithmetic used to perform the computation.  Thus this algorithm should not be used in practice. This is particularly bad if the standard deviation is small relative to the mean. However, the algorithm can be improved by adopting the method of the assumed mean.Computing shifted dataWe can use a property of the variance to avoid the catastrophic cancellation in this formula,namely the variance is invariant with respect to changes in a location parameter:\operatorname{Var}(X-k)=\operatorname{Var}(X).with k any constant, which leads to the new formula:s^2 = \displaystyle\frac {\sum_{i=1}^n (x_i-K)^2 - (\sum_{i=1}^n (x_i-K))^2/n}{n-1}. \!the closer K is to the mean value the more accurate the result will be, but just choosing a value inside thesamples range will guarantee the desired stability. If the values (x_i - K) are small then there are no problems with the sum of its squares, on the contrary, if they are large it necessarily means that the variance is large as well. In any case the second term in the formula is always smaller than the first one therefore no cancellation may occur."Chan1983"If we take just the first sample as K the algorithm can be written in Python programming language asdef shifted_data_variance(data):if len(data) == 0:return 0K = data[0]n = 0Sum = 0Sum_sqr = 0for x in data:n = n + 1Sum += x - KSum_sqr += (x - K) * (x - K)variance = (Sum_sqr - (Sum * Sum)/n)/(n - 1)# use n instead of (n-1) if want to compute the exact variance of the given data# use (n-1) if data are samples of a larger populationreturn variance;/source;this formula facilitates as well the incremental computation, that can be expressed asK = 0n = 0Ex = 0Ex2 = 0def add_variable(x):if (n == 0):K = xn = n + 1Ex += x - KEx2 += (x - K) * (x - K)def remove_variable(x):n = n - 1Ex -= (x - K)Ex2 -= (x - K) * (x - K)def get_meanvalue():return K + Ex / ndef get_variance():return (Ex2 - (Ex*Ex)/n) / (n-1);/source;Two-pass algorithmAn alternative approach, using a different formula for the variance, first computes the sample mean,:\bar x = \displaystyle \frac {\sum_{j=1}^n x_j}{n},and then computes the sum of the squares of the differences from the mean,:\mathrm{variance} = s^2 = \displaystyle\frac {\sum_{i=1}^n (x_i - \bar x)^2}{n-1} \!,where s is the standard deviation.  This is given by the following pseudocode:def two_pass_variance(data):n = 0sum1 = 0sum2 = 0for x in data:n += 1sum1 += xmean = sum1 / nfor x in data:sum2 += (x - mean)*(x - mean)variance = sum2 / (n - 1)return variance;/source;This algorithm is numerically stable if ''n'' is small."Einarsson2005"However, the results of both of these simple algorithms ("Naïve" and "Two-pass") can depend inordinately on the ordering of the data and can give poor results for very large data sets due to repeated roundoff error in the accumulation of the sums. Techniques such as compensated summation can be used to combat this error to a degree.Compensated variantThe compensated-summation version of the algorithm above reads:":0";;def compensated_variance(data):n = 0sum1 = 0for x in data:n += 1sum1 += xmean = sum1/nsum2 = 0sum3 = 0for x in data:sum2 += (x - mean)**2sum3 += (x - mean)variance = (sum2 - sum3**2/n)/(n - 1)return variance;/source;Online algorithmIt is often useful to be able to compute the variance in a single pass, inspecting each value x_i only once; for example, when the data are being collected without enough storage to keep all the values, or when costs of memory access dominate those of computation.  For such an online algorithm, a recurrence relation is required between quantities from which the required statistics can be calculated in a numerically stable fashion.The following formulas can be used to update the mean and (estimated) variance of the sequence, for an additional element x_{\mathrm{new}}. Here, ''xn'' denotes the sample mean of the first ''n'' samples (''x''1, ..., ''xn''), ''s''2''n'' their sample variance, and ''σ''2''n'' their population variance.:\bar x_n = \frac{(n-1) \, \bar x_{n-1} + x_n}{n} = \bar x_{n-1} + \frac{x_n - \bar x_{n-1}}{n} \!:s^2_n = \frac{(n-2)}{(n-1)} \, s^2_{n-1} + \frac{(x_n - \bar x_{n-1})^2}{n}, \quad n;1:\sigma^2_n = \frac{(n-1) \, \sigma^2_{n-1} + (x_n - \bar x_{n-1})(x_n - \bar x_{n})}{n}.These formulas suffer from numerical instability. A better quantity for updating is the sum of squares of differences from the current mean, \textstyle\sum_{i=1}^n (x_i - \bar x_n)^2, here denoted M_{2,n}::M_{2,n}\! = M_{2,n-1} + (x_n - \bar x_{n-1})(x_n - \bar x_n):s^2_n = \frac{M_{2,n}}{n-1}:\sigma^2_n = \frac{M_{2,n}}{n}A numerically stable algorithm for the sample variance is given below.  It also computes the mean.This algorithm is due to Knuth,Donald E. Knuth (1998). ''The Art of Computer Programming'', volume 2: ''Seminumerical Algorithms'', 3rd edn., p. 232. Boston: Addison-Wesley. who cites Welford,B. P. Welford (1962).["Note on a method for calculating corrected sums of squares and products"]. ''Technometrics'' 4(3):419–420. and it has been thoroughly analyzed.Chan, Tony F.; Golub, Gene H.; LeVeque, Randall J. (1983). Algorithms for Computing the Sample Variance: Analysis and Recommendations. The American Statistician 37, 242-247. Robert F. (1974). Comparison of Several Algorithms for Computing Sample Means and Variances. Journal of the American Statistical Association, Vol. 69, No. 348, 859-866.  It is also common to denote M_k = \bar x_k and S_k = M_{2,k}.def online_variance(data):n = 0mean = 0.0M2 = 0.0for x in data:n += 1delta = x - meanmean += delta/nM2 += delta*(x - mean)if n ; 2:return float('nan')else:return M2 / (n - 1);/source;This algorithm is much less prone to loss of precision due to catastrophic cancellation, but might not be as efficient because of the division operation inside the loop.  For a particularly robust two-pass algorithm for computing the variance, one can first compute and subtract an estimate of the mean, and then use this algorithm on the residuals.The parallel algorithm below illustrates how to merge multiple sets of statistics calculated online.Weighted incremental algorithmThe algorithm can be extended to handle unequal sample weights, replacing the simple counter ''n'' with the sum of weights seen so far.  West (1979)D. H. D. West (1979). ''Communications of the ACM'', 22, 9, 532-535: ''Updating Mean and Variance Estimates: An Improved Method'' suggests this incremental algorithm:def weighted_incremental_variance(dataWeightPairs):sumweight = 0mean = 0M2 = 0for x, weight in dataWeightPairs:  # Alternatively "for x, weight in zip(data, weights):"temp = weight + sumweightdelta = x - meanR = delta * weight / tempmean += RM2 += sumweight * delta * R  # Alternatively, "M2 = M2 + weight * delta * (x−mean)"sumweight = tempvariance_n = M2/sumweightvariance = variance_n * len(dataWeightPairs)/(len(dataWeightPairs) - 1);/source;Parallel algorithmChan et al.. note that the above "On-line" algorithm is a special case of an algorithm that works for any partition of the sample X into sets X_A, X_B::\delta\! = \bar x_B - \bar x_A:\bar x_X = \bar x_A + \delta\cdot\frac{n_B}{n_X}:M_{2,X} = M_{2,A} + M_{2,B} + \delta^2\cdot\frac{n_A n_B}{n_X}.This may be useful when, for example, multiple processing units may be assigned to discrete parts of the input.Chan's method for estimating the mean is numerically unstable when n_A \approx n_B and both are large, because the numerical error in \bar x_B - \bar x_A is not scaled down in the way that it is in the n_B = 1 case. In such cases, prefer \bar x_X = \frac{n_A \bar x_A + n_B \bar x_B}{n_A + n_B}.ExampleAssume that all floating point operations use the standard IEEE 754 double-precision arithmetic. Consider the sample (4, 7, 13, 16) from an infinite population. Based on this sample, the estimated population mean is 10, and the unbiased estimate of population variance is 30.  Both "Naïve" algorithm and "Two-pass" algorithm compute these values correctly.  Next consider the sample (108+4, 108+7, 108+13, 108+16), which gives rise to the same estimated variance as the first sample.  "Two-pass" algorithm computes this variance estimate correctly, but "Naïve" algorithm returns 29.333333333333332 instead of 30.  While this loss of precision may be tolerable and viewed as a minor flaw of "Naïve" algorithm, it is easy to find data that reveal a major flaw in the naive algorithm: Take the sample to be (109+4, 109+7, 109+13, 109+16).  Again the estimated population variance of 30 is computed correctly by "Two-pass"" algorithm, but "Naïve" algorithm now computes it as −170.66666666666666.  This is a serious problem with "Naïve" algorithm and is due to catastrophic cancellation in the subtraction of two similar numbers at the final stage of the algorithm.Higher-order statisticsTerriberry extends Chan's formulae to calculating the third and fourth central moments, needed for example when estimating skewness and kurtosis::M_{3,X} = M_{3,A} + M_{3,B} + \delta^3\frac{n_A n_B (n_A - n_B)}{n_X^2} + 3\delta\frac{n_AM_{2,B} - n_BM_{2,A}}{n_X}:\begin{align}M_{4,X} = M_{4,A} + M_{4,B} ; + \delta^4\frac{n_A n_B \left(n_A^2 - n_A n_B + n_B^2\right)}{n_X^3} \\; + 6\delta^2\frac{n_A^2 M_{2,B} + n_B^2 M_{2,A}}{n_X^2} + 4\delta\frac{n_AM_{3,B} - n_BM_{3,A}}{n_X} \\\end{align}Here the M_k are again the sums of powers of differences from the mean \Sigma(x - \overline{x})^k, giving:skewness: g_1 = \frac{\sqrt{n} M_3}{M_2^{3/2}},:kurtosis: g_2 = \frac{n M_4}{M_2^2}-3.For the incremental case (i.e., B = \{x\}), this simplifies to::\delta\! = x - m:m' = m + \frac{\delta}{n}:M_2' = M_2 + \delta^2 \frac{ n-1}{n}:M_3' = M_3 + \delta^3 \frac{ (n - 1) (n - 2)}{n^2} - \frac{3\delta M_2}{n}:M_4' = M_4 + \frac{\delta^4 (n - 1) (n^2 - 3n + 3)}{n^3} + \frac{6\delta^2 M_2}{n^2} - \frac{4\delta M_3}{n}By preserving the value \delta / n, only one division operation is needed and the higher-order statistics can thus be calculated for little incremental cost.An example of the online algorithm for kurtosis implemented as described is:def online_kurtosis(data):n = 0mean = 0M2 = 0M3 = 0M4 = 0for x in data:n1 = nn = n + 1delta = x - meandelta_n = delta / ndelta_n2 = delta_n * delta_nterm1 = delta * delta_n * n1mean = mean + delta_nM4 = M4 + term1 * delta_n2 * (n*n - 3*n + 3) + 6 * delta_n2 * M2 - 4 * delta_n * M3M3 = M3 + term1 * delta_n * (n - 2) - 3 * delta_n * M2M2 = M2 + term1kurtosis = (n*M4) / (M2*M2) - 3return kurtosis;/source;Pébayfurther extends these results to arbitrary-order central moments, for the incremental and the pairwise cases. One can also find there similar formulas for covariance.Choi and Sweetmanoffer two alternative methods to compute the skewness and kurtosis, each of which can save substantial computer memory requirements and CPU time in certain applications. The first approach is to compute the statistical moments by separating the data into bins and then computing the moments from the geometry of the resulting histogram, which effectively becomes a one-pass algorithm for higher moments. One benefit is that the statistical moment calculations can be carried out to arbitrary accuracy such that the computations can be tuned to the precision of, e.g., the data storage format or the original measurement hardware.  A relative histogram of a random variable can be constructed inthe conventional way: the range of potential values isdivided into bins and the number of occurrences within each bin arecounted and plotted such that the area of each rectangle equalsthe portion of the sample values within that bin::  H(x_k)=\frac{h(x_k)}{A}where h(x_k) and H(x_k) represent the frequency andthe relative frequency at bin x_k and A= \sum_{k=1}^{K} h(x_k)\,\Delta x_k is the total area of the histogram. After thisnormalization, the n raw moments and central moments of x(t)can be calculated from the relative histogram::m_n^{(h)} = \sum_{k=1}^{K}  x_k^n \, H(x_k) \Delta x_k= \frac{1}{A} \sum_{k=1}^{K}  x_k^n \, h(x_k) \Delta x_k:\theta_n^{(h)}= \sum_{k=1}^{K} \Big(x_k-m_1^{(h)}\Big)^n \, H(x_k)\Delta x_k= \frac{1}{A} \sum_{k=1}^{K} \Big(x_k-m_1^{(h)}\Big)^n \, h(x_k) \Delta x_kwhere the superscript ^{(h)} indicates the moments arecalculated from the histogram. For constant bin width \Deltax_k=\Delta x these two expressions can be simplified using I= A/\Delta x::m_n^{(h)}= \frac{1}{I} {\sum_{k=1}^{K} x_k^n \, h(x_k)}:\theta_n^{(h)}= \frac{1}{I}{\sum_{k=1}^{K} \Big(x_k-m_1^{(h)}\Big)^n \, h(x_k)}The second approach from Choi and Sweetman"Choi2010"is an analytical methodology to combine statistical moments from individual segments of a time-history such that the resulting overall moments are those of the complete time-history. This methodology could be used for parallel computation of statistical moments with subsequent combination of those moments, or for combination of statistical moments computed at sequential times.If Q sets of statistical moments are known:(\gamma_{0,q},\mu_{q},\sigma^2_{q},\alpha_{3,q},\alpha_{4,q})\quad  for q=1,2,...,Q , then each \gamma_n canbe expressed in terms of the equivalent n raw moments::\gamma_{n,q}= m_{n,q} \gamma_{0,q} \qquad \quad \textrm{for} \quad n=1,2,3,4  \quad \text{ and } \quad q = 1,2, \dots ,Qwhere \gamma_{0,q} is generally taken to be the duration of the q^{th} time-history, or the number of points if \Delta t is constant.The benefit of expressing the statistical moments interms of \gamma is that the Q sets can be combined byaddition, and there is no upper limit on the value of Q.:\gamma_{n,c}= \sum_{q=1}^{Q}\gamma_{n,q} \quad \quad \textrm{for} \quad n=0,1,2,3,4where the subscript _c represents the concatenatedtime-history or combined \gamma. These combined values of\gamma can then be inversely transformed into raw momentsrepresenting the complete concatenated time-history:m_{n,c}=\frac{\gamma_{n,c}}{\gamma_{0,c}} \quad \textrm{for} \quad n=1,2,3,4Known relationships between the raw moments (m_n) and the central moments  ( \theta_n = E[(x-\mu)^n]))are then used to compute the central moments of the concatenated time-history.  Finally, the statistical moments of the concatenated history are computed from the central moments::\mu_c=m_{1,c}\ \ \ \ \ \sigma^2_c=\theta_{2,c}\ \ \ \ \ \alpha_{3,c}=\frac{\theta_{3,c}}{\sigma_c^3}\ \ \ \ \ \alpha_{4,c}={\frac{\theta_{4,c}}{\sigma_c^4}}-3CovarianceVery similar algorithms can be used to compute the covariance.  The naive algorithm is::\operatorname{Cov}(X,Y) = \displaystyle\frac {\sum_{i=1}^n x_i y_i - (\sum_{i=1}^n x_i)(\sum_{i=1}^n y_i)/n}{n}. \!For the algorithm above, one could use the following Python code:def naive_covariance(data1, data2):n = len(data1)sum12 = 0sum1 = sum(data1)sum2 = sum(data2)for i in range(n):sum12 += data1[i]*data2[i]covariance = (sum12 - sum1*sum2 / n) / nreturn covariance;/source;As for the variance, the covariance of two random variables is also shift-invariant, so given that  K_x and K_y are whatever two constant values it can be written::\operatorname{Cov}(X,Y) = \operatorname{Cov}(X-k_x,Y-k_y) = \displaystyle\frac {\sum_{i=1}^n (x_i-K_x) (y_i-K_y) - (\sum_{i=1}^n (x_i-K_x))(\sum_{i=1}^n (y_i-K_y))/n}{n}. \!and again choosing a value inside the range of values will stabilize the formula against catastrophic cancellation as well as make it more robust against big sums. Taking the first value of each data set, the algorithm can be written as:def shifted_data_covariance(dataX, dataY):n = len(dataX)if (n ; 2):return 0Kx = dataX[0]Ky = dataY[0]Ex = 0Ey = 0Exy = 0for i in range(n):Ex += dataX[i] - KxEy += dataY[i] - KyExy += (dataX[i] - Kx) * (dataY[i] - Ky)return (Exy - Ex * Ey / n) / n;/source;The two-pass algorithm first computes the sample means, and then the covariance::\bar x = \displaystyle \sum_{i=1}^n x_i/n:\bar y = \displaystyle \sum_{i=1}^n y_i/n:\operatorname{Cov}(X,Y) = \displaystyle\frac {\sum_{i=1}^n (x_i - \bar x)(y_i - \bar y)}{n}. \!The two-pass algorithm may be written as:def two_pass_covariance(data1, data2):n = len(data1)mean1 = sum(data1) / nmean2 = sum(data2) / ncovariance = 0for i in range(n):a = data1[i] - mean1b = data2[i] - mean2covariance += a*b / nreturn covariance;/source;A slightly more accurate compensated version performs the full naive algorithm on the residuals.  The final sums \textstyle\sum x_i and \textstyle\sum y_i ''should'' be zero, but the second pass compensates for any small error.A slight modification of the online algorithm for computing the variance yields an online algorithm for the covariance:def online_covariance(data1, data2):mean1 = mean2 = 0.M12 = 0.n = len(data1)for i in range(n):delta1 = (data1[i] - mean1) / (i + 1)mean1 += delta1delta2 = (data2[i] - mean2) / (i + 1)mean2 += delta2M12 += i * delta1 * delta2 - M12 / (i + 1)return n / (n - 1.) * M12;/source;A stable one-pass algorithm exists, similar to the one above, that computes co-moment \textstyle C_n = \sum_{i=1}^n (x_i - \bar x_n)(y_i - \bar y_n)::\bar x_n = \bar x_{n-1} + \frac{x_n - \bar x_{n-1}}{n} \!:\bar y_n = \bar y_{n-1} + \frac{y_n - \bar y_{n-1}}{n} \!:C_n = C_{n-1} + (x_n - \bar x_n)(y_n - \bar y_{n-1}) = C_{n-1} + (y_n - \bar y_n)(x_n - \bar x_{n-1})The apparent asymmetry in that last equation is due to the fact that \textstyle (x_n - \bar x_n) = \frac{n-1}{n}(x_n - \bar x_{n-1}), so both update terms are equal to \textstyle \frac{n-1}{n}(x_n - \bar x_{n-1})(y_n - \bar y_{n-1}).  Even greater accuracy can be achieved by first computing the means, then using the stable one-pass algorithm on the residuals.Thus we can compute the covariance as:\begin{align}\operatorname{Cov}_N(X,Y) = \frac{C_N}{N} ;= \frac{\operatorname{Cov}_{N-1}(X,Y)\cdot(N-1) + (x_n - \bar x_n)(y_n - \bar y_{n-1})}{N}\\;= \frac{\operatorname{Cov}_{N-1}(X,Y)\cdot(N-1) + (y_n - \bar y_n)(x_n - \bar x_{n-1})}{N}\\;= \frac{\operatorname{Cov}_{N-1}(X,Y)\cdot(N-1) + \frac{N-1}{N}(x_n - \bar x_{n-1})(y_n - \bar y_{n-1})}{N}.\end{align}Likewise, there is a formula for combining the covariances of two sets that can be used to parallelize the computation::C_X = C_A + C_B + (\bar x_A - \bar x_B)(\bar y_A - \bar y_B)\cdot\frac{n_A n_B}{n_X}.See also*Algebraic formula for the variance*Kahan summation algorithm*Squared deviations from the meanReferencesExternal links*